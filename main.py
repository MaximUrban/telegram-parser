import os
import threading
from telethon import TelegramClient, events
from telethon.tl.functions.contacts import SearchRequest
from telethon.tl.types import InputPeerEmpty, Channel
from http.server import BaseHTTPRequestHandler, HTTPServer

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
api_id = 29840156
api_hash = '3473b0f92b274f13f1b351b8f5b67b46'

client = TelegramClient('bot', api_id, api_hash)
client.start()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parser ===
@client.on(events.NewMessage(pattern='/parser'))
async def parser_command(event):
    user_id = event.sender_id
    user_states[user_id] = 'awaiting_query'
    await event.reply("‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–º–∞—Ç–∏–∫—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.NewMessage)
async def handle_message(event):
    user_id = event.sender_id
    text = event.raw_text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if event.out:
        return

    # –ï—Å–ª–∏ –∂–¥—ë–º —Ç–µ–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_states.get(user_id) == 'awaiting_query':
        user_states.pop(user_id)
        await event.reply(f"üîç –ò—â—É –∫–∞–Ω–∞–ª—ã –ø–æ —Ç–µ–º–µ: {text}")
        channels = await search_channels(text)
        if channels:
            await event.reply("\n\n".join(channels[:15]), link_preview=False)
        else:
            await event.reply("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.")
    else:
        await event.reply("‚úÖ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –Ω–∞ Render —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# === –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ ===
async def search_channels(query):
    try:
        result = await client(SearchRequest(
            q=query,
            limit=50,
            offset=0,
            offset_rate=0,
            peer=InputPeerEmpty()
        ))

        channels = []
        for chat in result.chats:
            if isinstance(chat, Channel) and chat.broadcast and not chat.megagroup and chat.username and chat.participants_count and chat.participants_count >= 1000:
                link = f"https://t.me/{chat.username}"
                channels.append(f"üì£ [{chat.title}]({link}) ‚Äî {chat.participants_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        return channels
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return []

# === –ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
class SimpleHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Bot is running!')

def run_web_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(('', port), SimpleHandler)
    print(f"[üåê] Web-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    threading.Thread(target=run_web_server).start()
    print("[ü§ñ] Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    client.run_until_disconnected()
